package sac22_mulib_benchmark;
import java.util.stream.Stream;
import de.wwu.muli.*;
import de.wwu.muli.solution.*;

public class Partition3 {
	int n = 15;     // number of input values
	int m = n/3;   // number of triples taken from input values
	int[] a;       // random input of length n
	int sum = 0;   // sum of all inputs
	int[] mapping; // mapping of inputs to triples

	public static void main(String[] args) {
	for (int i = 0; i < 10; i++) {
	    long start = System.nanoTime();
	    new Partition3();
	    long end = System.nanoTime();
	    System.out.println(end-start);
	}
    }

	public Partition3(){
		a = toN(n); // generate some input
		for(int k: a) sum += k;

		// map each input element to a triple
		Solution[] solutions = Muli.getAllSolutions(() -> {
			mapping = generateMapping(n);
			checkMapping();
			return mapping;
		});
		System.out.println(solutions.length);
    }

	public static int[] toN(int n){
		int[] a = new int[n];
		for(int i=0; i<n; i++) a[i] = i;
		return a; }

	public int[] generateMapping(int n){
		int[] mapping = new int[n];
		for(int i=0; i<n; i++) {
			int triple = freeVar();
			if (triple <= 0 || triple > m)
				throw Muli.fail();
			else mapping[i] = triple; }
		return mapping; }

        public int freeVar() { 
		int i free; return i;
	}
	
	public void checkMapping() {
		for(int j=1; j<=m; j++) {
			int sum3 = 0;
			int occurrences = 0;
			for(int i=0; i<n; i++)
				if(mapping[i] == j) {
					occurrences++;
					sum3 += a[i]; }
			if (occurrences != 3 || sum3 != sum/m) throw Muli.fail();		
		} } }
